#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

env {
    parallelism = 1
    job.mode = "BATCH"
    spark.app.name = "SeaTunnel"
    spark.executor.instances = 1
    spark.executor.cores = 1
    spark.executor.memory = "1g"
    spark.master = local
}

source {
    Kafka {
        topic = "test_protobuf_topic_fake_source"
        format = protobuf
        protobuf_message_name = Person
        protobuf_schema = """
            syntax = "proto3";

            package org.apache.seatunnel.format.protobuf;

            option java_outer_classname = "ProtobufE2E";

            message Person {
                int32 c_int32 = 1;
                int64 c_int64 = 2;
                float c_float = 3;
                double c_double = 4;
                bool c_bool = 5;
                string c_string = 6;
                bytes c_bytes = 7;

                message Address {
                    string street = 1;
                    string city = 2;
                    string state = 3;
                    string zip = 4;
                }

                Address address = 8;

                map<string, float> attributes = 9;

                repeated string phone_numbers = 10;
            }
        """
        schema = {
            fields {
                c_int32 = int
                c_int64 = long
                c_float = float
                c_double = double
                c_bool = boolean
                c_string = string
                c_bytes = bytes

                Address {
                    city = string
                    state = string
                    street = string
                }
                attributes = "map<string,float>"
                phone_numbers = "array<string>"
            }
        }
        bootstrap.servers = "kafkaCluster:9092"
        start_mode = "earliest"
        result_table_name = "kafka_table"
    }
}

sink {
    Assert {
        source_table_name = "kafka_table"
        rules = {
            field_rules = [
                {
                    field_name = c_int32
                    field_type = int
                    field_value = [
                        {
                            rule_type = NOT_NULL
                        }
                    ]
                },
                {
                    field_name = c_int64
                    field_type = long
                    field_value = [
                        {
                            rule_type = NOT_NULL
                        }
                    ]
                },
                {
                    field_name = c_float
                    field_type = float
                    field_value = [
                        {
                            rule_type = NOT_NULL
                        }
                    ]
                },
                {
                    field_name = c_double
                    field_type = double
                    field_value = [
                        {
                            rule_type = NOT_NULL
                        }
                    ]
                },
                {
                    field_name = c_bool
                    field_type = boolean
                    field_value = [
                        {
                            rule_type = NOT_NULL
                        }
                    ]
                },
                {
                    field_name = c_string
                    field_type = string
                    field_value = [
                        {
                            rule_type = NOT_NULL
                        }
                    ]
                },
                {
                    field_name = c_bytes
                    field_type = bytes
                    field_value = [
                        {
                            rule_type = NOT_NULL
                        }
                    ]
                },
                {
                    field_name = attributes
                    field_type = "map<string,float>"
                    field_value = [
                        {
                            rule_type = NOT_NULL
                        }
                    ]
                },
                {
                    field_name = phone_numbers
                    field_type = array<string>
                    field_value = [
                        {
                            rule_type = NOT_NULL
                        }
                    ]
                }
            ]
        }
    }
}